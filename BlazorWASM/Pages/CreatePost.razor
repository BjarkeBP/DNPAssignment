@page "/CreatePost"
@attribute [Authorize]
@using HttpClients.ClientInterfaces
@using Domain.Models
@using System.Security.Claims
@using Domain.DTOs
@inject IUserService userService
@inject IPostService postService
@inject NavigationManager navMgr


<div class="card">
    
    
        <h3>Create Post</h3>
    <div class="form-group field">
        <label>Title:</label>
        <input type="text" @bind="postTitle"/>
    </div>
    
    <div class="form-group field">
        <label>Body:</label>
        <input type="text" @bind="postBody"/>
    </div>

    <div class="button-row">
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
        
        <button @onclick="Create"  class="acceptbtn">Create</button>
    </div>
    
    
</div>



@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private int selectedUserId;
    private string postTitle = "";
    private string postBody = "";
    private string? name;
    
    private string msg = "";
    private async Task Create()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        
        name = user.Identity!.Name!;
        Console.WriteLine(name);
        
        msg = "";
        if (selectedUserId == null)
        {
            msg = "You must select an assignee!";
            return;
        }
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }

        try
        {
            PostCreationDto dto = new PostCreationDto(name!, postTitle, postBody);
            await postService.CreateAsync(dto);
            navMgr.NavigateTo("/ViewPosts");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}